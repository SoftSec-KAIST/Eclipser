--- qemu-2.3.0-branch/tcg/i386/tcg-target.c.orig	2017-10-01 21:59:22.790565093 +0900
+++ qemu-2.3.0-branch/tcg/i386/tcg-target.c	2017-10-01 21:57:46.366637219 +0900
@@ -24,6 +24,8 @@
 
 #include "tcg-be-ldst.h"
 
+extern void chatkey_trampoline(tcg_target_ulong distance, int operand_size);
+
 #ifndef NDEBUG
 static const char * const tcg_target_reg_names[TCG_TARGET_NB_REGS] = {
 #if TCG_TARGET_REG_BITS == 64
@@ -93,7 +95,7 @@
 #define TCG_CT_CONST_U32 0x200
 #define TCG_CT_CONST_I32 0x400
 
-/* Registers used with L constraint, which are the first argument 
+/* Registers used with L constraint, which are the first argument
    registers on x86_64, and two random call clobbered registers on
    i386. */
 #if TCG_TARGET_REG_BITS == 64
@@ -301,8 +303,10 @@
 #define P_SIMDF3        0x10000         /* 0xf3 opcode prefix */
 #define P_SIMDF2        0x20000         /* 0xf2 opcode prefix */
 
+#define OPC_ARITH_EbIb	(0x80)
 #define OPC_ARITH_EvIz	(0x81)
 #define OPC_ARITH_EvIb	(0x83)
+#define OPC_ARITH_GbEb	(0x02)		/* ... plus (ARITH_FOO << 3) */
 #define OPC_ARITH_GvEv	(0x03)		/* ... plus (ARITH_FOO << 3) */
 #define OPC_ANDN        (0xf2 | P_EXT38)
 #define OPC_ADD_GvEv	(OPC_ARITH_GvEv | (ARITH_ADD << 3))
@@ -832,6 +836,9 @@
     }
 
     if (val == (int8_t)val) {
+        /* Note that OPC_ARITH_EvIb(0x83) specifies to extend byte operand into
+         * word or dword and then subtract.
+         */
         tcg_out_modrm(s, OPC_ARITH_EvIb + rexw, c, r0);
         tcg_out8(s, val);
         return;
@@ -842,6 +849,10 @@
         return;
     }
 
+    /* No handling for 64bit 'val', since 64bit constant cannot exist in both
+     * x86/x64 architecture.
+     */
+
     tcg_abort();
 }
 
@@ -1718,6 +1729,7 @@
                               const TCGArg *args, const int *const_args)
 {
     int c, vexop, rexw = 0;
+    TCGMemOp ot;
 
 #if TCG_TARGET_REG_BITS == 64
 # define OP_32_64(x) \
@@ -1822,12 +1834,92 @@
         }
         c = ARITH_ADD;
         goto gen_arith;
+
     OP_32_64(sub):
+
+        if (args[3] != CHATKEY_IGNORE) {
+          ot = args[4];
+#if TCG_TARGET_REG_BITS == 64
+          tcg_out_push(s, TCG_REG_RDI);
+          tcg_out_push(s, TCG_REG_RSI);
+          tcg_out_push(s, TCG_REG_RDX);
+          tcg_out_mov(s, TCG_TYPE_I64, TCG_REG_RDI, args[0]);
+          if (const_args[2]) {
+            tcg_out_movi(s, TCG_TYPE_I64, TCG_REG_RSI, args[2]);
+          } else {
+            tcg_out_mov(s, TCG_TYPE_I64, TCG_REG_RSI, args[2]);
+          }
+          tcg_out_movi(s, TCG_TYPE_I64, TCG_REG_RDX, (args[3] << 6) | ot);
+          tcg_out_call(s, (tcg_insn_unit*)chatkey_trampoline);
+          tcg_out_pop(s, TCG_REG_RDX);
+          tcg_out_pop(s, TCG_REG_RSI);
+          tcg_out_pop(s, TCG_REG_RDI);
+#else
+          tcg_out_push(s, TCG_REG_EDI);
+          tcg_out_push(s, TCG_REG_ESI);
+          tcg_out_push(s, TCG_REG_EDX);
+          tcg_out_mov(s, TCG_TYPE_I32, TCG_REG_EDI, args[0]);
+          if (const_args[2]) {
+            tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_ESI, args[2]);
+          } else {
+            tcg_out_mov(s, TCG_TYPE_I32, TCG_REG_ESI, args[2]);
+          }
+          tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_EDX, (args[3] << 6) | ot);
+          tcg_out_call(s, (tcg_insn_unit*)chatkey_trampoline);
+          tcg_out_pop(s, TCG_REG_EDX);
+          tcg_out_pop(s, TCG_REG_ESI);
+          tcg_out_pop(s, TCG_REG_EDI);
+#endif
+        }
+
         c = ARITH_SUB;
-        goto gen_arith;
+        /* Copied from 'gen_arith:' below. */
+        if (const_args[2]) {
+            tgen_arithi(s, c + rexw, args[0], args[2], 0);
+        } else {
+            tgen_arithr(s, c + rexw, args[0], args[2]);
+        }
+        break;
+
     OP_32_64(and):
+
+        /* Recall that the target of Chatkey is 'test' with same register */
+        if (args[3] != CHATKEY_IGNORE && !const_args[2]) {
+          ot = args[4];
+#if TCG_TARGET_REG_BITS == 64
+          tcg_out_push(s, TCG_REG_RDI);
+          tcg_out_push(s, TCG_REG_RSI);
+          tcg_out_push(s, TCG_REG_RDX);
+          tcg_out_mov(s, TCG_TYPE_I64, TCG_REG_RDI, args[0]);
+          tcg_out_movi(s, TCG_TYPE_I64, TCG_REG_RSI, 0);
+          tcg_out_movi(s, TCG_TYPE_I64, TCG_REG_RDX, (args[3] << 6) | ot);
+          tcg_out_call(s, (tcg_insn_unit*)chatkey_trampoline);
+          tcg_out_pop(s, TCG_REG_RDX);
+          tcg_out_pop(s, TCG_REG_RSI);
+          tcg_out_pop(s, TCG_REG_RDI);
+#else
+          tcg_out_push(s, TCG_REG_EDI);
+          tcg_out_push(s, TCG_REG_ESI);
+          tcg_out_push(s, TCG_REG_EDX);
+          tcg_out_mov(s, TCG_TYPE_I32, TCG_REG_EDI, args[0]);
+          tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_ESI, 0);
+          tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_EDX, (args[3] << 6) | ot);
+          tcg_out_call(s, (tcg_insn_unit*)chatkey_trampoline);
+          tcg_out_pop(s, TCG_REG_EDX);
+          tcg_out_pop(s, TCG_REG_ESI);
+          tcg_out_pop(s, TCG_REG_EDI);
+#endif
+        }
+
         c = ARITH_AND;
-        goto gen_arith;
+        /* Copied from 'gen_arith:' below. */
+        if (const_args[2]) { // Copied from 'gen_arith:' below.
+            tgen_arithi(s, c + rexw, args[0], args[2], 0);
+        } else {
+            tgen_arithr(s, c + rexw, args[0], args[2]);
+        }
+        break;
+
     OP_32_64(or):
         c = ARITH_OR;
         goto gen_arith;
