--- qemu-2.3.0-branch/tcg/tcg-op.h.orig	2017-08-18 10:10:04.060465652 +0900
+++ qemu-2.3.0-branch/tcg/tcg-op.h	2017-08-18 10:08:03.058197082 +0900
@@ -381,14 +381,42 @@
     tcg_gen_op3_i32(INDEX_op_add_i32, ret, arg1, arg2);
 }

+/* A variant of tcg_gen_sub_i32() for chatkey. Additional argument is passed
+ * to tcg_gen_op5ii_i32(), to indicate whether this instruction must be
+ * instrumented during TCG-->ASM translation (cf. tcg_out_op()). This value
+ * will be updated appropriately when subsequent conditional jump statement
+ * is encountered. Also, 'TCGMem ot' argument was introduced, to store the
+ * operand size information.
+ */
+static inline void tcg_gen_sub_i32_chatkey(TCGv_i32 ret, TCGv_i32 arg1,
+                                           TCGv_i32 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i32(INDEX_op_sub_i32, ret, arg1, arg2, CHATKEY_IGNORE, ot);
+}
+
 static inline void tcg_gen_sub_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
 {
-    tcg_gen_op3_i32(INDEX_op_sub_i32, ret, arg1, arg2);
+    /* Use dummy value MO_8 as operand size */
+    tcg_gen_op5ii_i32(INDEX_op_sub_i32, ret, arg1, arg2, CHATKEY_IGNORE, MO_8);
+}
+
+/* A variant of tcg_gen_and_i32() for chatkey. Additional argument is passed
+ * to tcg_gen_op5ii_i32(), to indicate whether this instruction must be
+ * instrumented during TCG-->ASM translation (cf. tcg_out_op()). This value
+ * will be updated appropriately when subsequent conditional jump statement
+ * is encountered. Also, 'TCGMem ot' argument was introduced, to store the
+ * operand size information.
+ */
+static inline void tcg_gen_and_i32_chatkey(TCGv_i32 ret, TCGv_i32 arg1,
+                                           TCGv_i32 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i32(INDEX_op_and_i32, ret, arg1, arg2, CHATKEY_IGNORE, ot);
 }

 static inline void tcg_gen_and_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
 {
-    tcg_gen_op3_i32(INDEX_op_and_i32, ret, arg1, arg2);
+    /* Use dummy value MO_8 as operand size */
+    tcg_gen_op5ii_i32(INDEX_op_and_i32, ret, arg1, arg2, CHATKEY_IGNORE, MO_8);
 }

 static inline void tcg_gen_or_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
@@ -580,14 +608,42 @@
     tcg_gen_op3_i64(INDEX_op_add_i64, ret, arg1, arg2);
 }

+/* A variant of tcg_gen_sub_i64() for chatkey. Additional argument is passed
+ * to tcg_gen_op5ii_i32(), to indicate whether this instruction must be
+ * instrumented during TCG-->ASM translation (cf. tcg_out_op()). This value
+ * will be updated appropriately when subsequent conditional jump statement
+ * is encountered. Also, 'TCGMem ot' argument was introduced, to store the
+ * operand size information.
+ */
+static inline void tcg_gen_sub_i64_chatkey(TCGv_i64 ret, TCGv_i64 arg1,
+                                           TCGv_i64 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i64(INDEX_op_sub_i64, ret, arg1, arg2, CHATKEY_IGNORE, ot);
+}
+
 static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
-    tcg_gen_op3_i64(INDEX_op_sub_i64, ret, arg1, arg2);
+    /* Use dummy value MO_8 as operand size */
+    tcg_gen_op5ii_i64(INDEX_op_sub_i64, ret, arg1, arg2, CHATKEY_IGNORE, MO_8);
+}
+
+/* A variant of tcg_gen_and_i64() for chatkey. Additional argument is passed
+ * to tcg_gen_op5ii_i32(), to indicate whether this instruction must be
+ * instrumented during TCG-->ASM translation (cf. tcg_out_op()). This value
+ * will be updated appropriately when subsequent conditional jump statement
+ * is encountered. Also, 'TCGMem ot' argument was introduced, to store the
+ * operand size information.
+ */
+static inline void tcg_gen_and_i64_chatkey(TCGv_i64 ret, TCGv_i64 arg1,
+                                           TCGv_i64 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i64(INDEX_op_and_i64, ret, arg1, arg2, CHATKEY_IGNORE, ot);
 }

 static inline void tcg_gen_and_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
-    tcg_gen_op3_i64(INDEX_op_and_i64, ret, arg1, arg2);
+    /* Use dummy value MO_8 as operand size */
+    tcg_gen_op5ii_i64(INDEX_op_and_i64, ret, arg1, arg2, CHATKEY_IGNORE, MO_8);
 }

 static inline void tcg_gen_or_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
@@ -644,10 +700,22 @@
                      TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));
 }

+/* XXX (Chatkey)
+ * We just leave tcg_gen_sub_i64() below as it is, without adding its
+ * tcg_gen_sub_i64_chatkey(). This is because the definition below is never used
+ * as long as we are targeting Intel architecture. This definition is used when
+ * both 'TCG_TARGET_REG_BITS == 32' and 'TARGET_LONG_BITS == 64' are satisfied.
+ * But if you take a look into target-i386/cpu.h and tcg/i386/tcg-target.h, two
+ * conditions cannot be satisfied at the same time. If we want to extend Chatkey
+ * to support other architectures, we should investigate if the architecture
+ * has 32-bit width registers but supports 64-bit subtraction. If so, below code
+ * must be modified as well.
+ */
 static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
+    assert(1 == 2); // Should be unreachable for Intel
     tcg_gen_sub2_i32(TCGV_LOW(ret), TCGV_HIGH(ret), TCGV_LOW(arg1),
-                     TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));
+               TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));
 }

 void tcg_gen_discard_i64(TCGv_i64 arg);
@@ -661,6 +729,7 @@
 void tcg_gen_ld32s_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);
 void tcg_gen_ld_i64(TCGv_i64 ret, TCGv_ptr arg2, tcg_target_long offset);
 void tcg_gen_st_i64(TCGv_i64 arg1, TCGv_ptr arg2, tcg_target_long offset);
+// (Chatkey) Same for 'and'. Refer to the comment for tcg_gen_sub_i64() above.
 void tcg_gen_and_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);
 void tcg_gen_or_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);
 void tcg_gen_xor_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2);
@@ -826,10 +895,12 @@
 #define tcg_gen_add_tl tcg_gen_add_i64
 #define tcg_gen_addi_tl tcg_gen_addi_i64
 #define tcg_gen_sub_tl tcg_gen_sub_i64
+#define tcg_gen_sub_tl_chatkey tcg_gen_sub_i64_chatkey
 #define tcg_gen_neg_tl tcg_gen_neg_i64
 #define tcg_gen_subfi_tl tcg_gen_subfi_i64
 #define tcg_gen_subi_tl tcg_gen_subi_i64
 #define tcg_gen_and_tl tcg_gen_and_i64
+#define tcg_gen_and_tl_chatkey tcg_gen_and_i64_chatkey
 #define tcg_gen_andi_tl tcg_gen_andi_i64
 #define tcg_gen_or_tl tcg_gen_or_i64
 #define tcg_gen_ori_tl tcg_gen_ori_i64
@@ -904,10 +975,12 @@
 #define tcg_gen_add_tl tcg_gen_add_i32
 #define tcg_gen_addi_tl tcg_gen_addi_i32
 #define tcg_gen_sub_tl tcg_gen_sub_i32
+#define tcg_gen_sub_tl_chatkey tcg_gen_sub_i32_chatkey
 #define tcg_gen_neg_tl tcg_gen_neg_i32
 #define tcg_gen_subfi_tl tcg_gen_subfi_i32
 #define tcg_gen_subi_tl tcg_gen_subi_i32
 #define tcg_gen_and_tl tcg_gen_and_i32
+#define tcg_gen_and_tl_chatkey tcg_gen_and_i32_chatkey
 #define tcg_gen_andi_tl tcg_gen_andi_i32
 #define tcg_gen_or_tl tcg_gen_or_i32
 #define tcg_gen_ori_tl tcg_gen_ori_i32
