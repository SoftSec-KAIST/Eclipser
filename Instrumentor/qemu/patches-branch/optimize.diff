--- qemu-2.3.0-branch/tcg/optimize.c.orig	2017-08-22 16:45:31.562156045 +0900
+++ qemu-2.3.0-branch/tcg/optimize.c	2017-08-22 16:16:49.397284593 +0900
@@ -258,8 +258,8 @@
     CASE_OP_32_64(add):
         return x + y;
 
-    CASE_OP_32_64(sub):
-        return x - y;
+    //CASE_OP_32_64(sub):
+    //    return x - y;
 
     CASE_OP_32_64(mul):
         return x * y;
@@ -674,13 +674,19 @@
                 continue;
             }
             break;
+        /* To implement instrumentation for Chatkey, we disable this
+         * optimization for subtraction. If we substitute '... = $0 - %reg' with
+         * negation, we have to examine 'neg' to see whether we should insert
+         * instrumentation code. This will make our implementation unnecessarily
+         * complicated.
+         *
         CASE_OP_32_64(sub):
             {
                 TCGOpcode neg_op;
                 bool have_neg;
 
                 if (temps[args[2]].state == TCG_TEMP_CONST) {
-                    /* Proceed with possible constant folding. */
+                    / * Proceed with possible constant folding. * /
                     break;
                 }
                 if (opc == INDEX_op_sub_i32) {
@@ -702,6 +708,7 @@
                 }
             }
             break;
+         */
         CASE_OP_32_64(xor):
         CASE_OP_32_64(nand):
             if (temps[args[1]].state != TCG_TEMP_CONST
@@ -763,7 +770,10 @@
         /* Simplify expression for "op r, a, const => mov r, a" cases */
         switch (opc) {
         CASE_OP_32_64(add):
-        CASE_OP_32_64(sub):
+        /* To implement instrumentation for Chatkey, we disable the optimization
+         * that may remove the side effect on eflags we should investigate.
+         */
+        //CASE_OP_32_64(sub):
         CASE_OP_32_64(shl):
         CASE_OP_32_64(shr):
         CASE_OP_32_64(sar):
@@ -778,7 +788,10 @@
                 goto do_mov3;
             }
             break;
-        CASE_OP_32_64(and):
+        /* To implement instrumentation for Chatkey, we disable the optimization
+         * that may remove the side effect on eflags we should investigate.
+         */
+        //CASE_OP_32_64(and):
         CASE_OP_32_64(orc):
         CASE_OP_32_64(eqv):
             if (temps[args[1]].state != TCG_TEMP_CONST
@@ -959,7 +972,10 @@
 
         /* Simplify expression for "op r, a, 0 => movi r, 0" cases */
         switch (opc) {
-        CASE_OP_32_64(and):
+        /* To implement instrumentation for Chatkey, we disable the optimization
+         * that may remove the side effect on eflags we should investigate.
+         */
+        //CASE_OP_32_64(and):
         CASE_OP_32_64(mul):
         CASE_OP_32_64(muluh):
         CASE_OP_32_64(mulsh):
@@ -976,7 +992,10 @@
         /* Simplify expression for "op r, a, a => mov r, a" cases */
         switch (opc) {
         CASE_OP_32_64(or):
-        CASE_OP_32_64(and):
+        /* To implement instrumentation for Chatkey, we disable the optimization
+         * that may remove the side effect on eflags we should investigate.
+         */
+        //CASE_OP_32_64(and):
             if (temps_are_copies(args[1], args[2])) {
                 if (temps_are_copies(args[0], args[1])) {
                     tcg_op_remove(s, op);
@@ -996,7 +1015,7 @@
         /* Simplify expression for "op r, a, a => movi r, 0" cases */
         switch (opc) {
         CASE_OP_32_64(andc):
-        CASE_OP_32_64(sub):
+        //CASE_OP_32_64(sub):
         CASE_OP_32_64(xor):
             if (temps_are_copies(args[1], args[2])) {
                 tcg_opt_gen_movi(s, op, args, opc, args[0], 0);
@@ -1052,7 +1071,7 @@
             goto do_default;
 
         CASE_OP_32_64(add):
-        CASE_OP_32_64(sub):
+        //CASE_OP_32_64(sub):
         CASE_OP_32_64(mul):
         CASE_OP_32_64(or):
         CASE_OP_32_64(and):
