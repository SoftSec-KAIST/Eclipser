--- qemu-2.3.0-branch/cpu-exec.c.orig	2017-09-17 01:29:39.966426739 +0900
+++ qemu-2.3.0-branch/cpu-exec.c	2017-09-17 01:28:53.506606640 +0900
@@ -28,6 +28,14 @@
 #include "exec/memory-internal.h"
 #include "qemu/rcu.h"
 
+extern abi_ulong chatkey_entry_point;
+extern abi_ulong chatkey_curr_addr;
+extern bool chatkey_EP_passed;
+extern void chatkey_setup(void);
+extern void chatkey_update_hash(abi_ulong addr);
+
+#include "afl-qemu-cpu-inl.h"
+
 /* -icount align implementation. */
 
 typedef struct SyncClocks {
@@ -298,6 +306,8 @@
    /* if no translated code available, then translate it now */
     tb = tb_gen_code(cpu, pc, cs_base, flags, 0);
 
+    afl_request_tsl(pc, cs_base, flags);
+
  found:
     /* Move the last found TB to the head of the list */
     if (likely(*ptb1)) {
@@ -480,6 +490,7 @@
                     cpu->exception_index = EXCP_INTERRUPT;
                     cpu_loop_exit(cpu);
                 }
+
                 spin_lock(&tcg_ctx.tb_ctx.tb_lock);
                 have_tb_lock = true;
                 tb = tb_find_fast(env);
@@ -492,6 +503,22 @@
                     next_tb = 0;
                     tcg_ctx.tb_ctx.tb_invalidated_flag = 0;
                 }
+
+                if(tb->pc == chatkey_entry_point) {
+                  /* XXX. If the following line is moved into chatkey_setup(), a
+                   * weired bug occurs when fork server is enabled. In the first
+                   * execution, execution branchs are correcly collected. But
+                   * in the subsequent executions, chatkey_log_branch() is not
+                   * called at all.
+                   */
+                  chatkey_EP_passed = true;
+                  afl_forkserver(env);
+                  chatkey_setup();
+                }
+
+                chatkey_curr_addr = tb->pc;
+                chatkey_update_hash(tb->pc);
+
                 if (qemu_loglevel_mask(CPU_LOG_EXEC)) {
                     qemu_log("Trace %p [" TARGET_FMT_lx "] %s\n",
                              tb->tc_ptr, tb->pc, lookup_symbol(tb->pc));
@@ -499,10 +526,12 @@
                 /* see if we can patch the calling TB. When the TB
                    spans two pages, we cannot safely do a direct
                    jump. */
-                if (next_tb != 0 && tb->page_addr[1] == -1) {
-                    tb_add_jump((TranslationBlock *)(next_tb & ~TB_EXIT_MASK),
-                                next_tb & TB_EXIT_MASK, tb);
-                }
+                /* XXX: chatkey. Commented out by tunz.
+                 * if (next_tb != 0 && tb->page_addr[1] == -1) {
+                 *     tb_add_jump((TranslationBlock *)(next_tb & ~TB_EXIT_MASK),
+                 *                 next_tb & TB_EXIT_MASK, tb);
+                 *}
+                 */
                 have_tb_lock = false;
                 spin_unlock(&tcg_ctx.tb_ctx.tb_lock);
 
