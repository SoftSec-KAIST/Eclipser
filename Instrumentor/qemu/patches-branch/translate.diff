--- qemu-2.3.0-branch/target-i386/translate.c.orig	2017-09-17 00:03:03.803748021 +0900
+++ qemu-2.3.0-branch/target-i386/translate.c	2017-09-16 23:51:44.773721311 +0900
@@ -60,6 +60,13 @@
 # define clztl  clz32
 #endif
 
+/* A variable introduced in chatkey.c, to decide whether we should start
+ * instrumentation.
+ */
+extern int chatkey_EP_passed;
+extern abi_ulong chatkey_curr_addr;
+extern abi_ulong chatkey_targ_addr;
+
 //#define MACRO_TEST   1
 
 /* global register indexes */
@@ -126,6 +133,11 @@
     int cpuid_ext2_features;
     int cpuid_ext3_features;
     int cpuid_7_0_ebx_features;
+    /* Additional information for Chatkey */
+    int latest_tgt_parm_idx;
+    /* The parameter index of the latest cmp instruction. This index will be
+     * used to update parameter when subsequent jnz instruction is encountered.
+     */
 } DisasContext;
 
 static void gen_eob(DisasContext *s);
@@ -391,7 +403,7 @@
     tcg_gen_addi_tl(cpu_A0, cpu_A0, val);
 }
 #endif
-    
+
 static void gen_add_A0_im(DisasContext *s, int val)
 {
 #ifdef TARGET_X86_64
@@ -730,6 +742,11 @@
     tcg_gen_mov_tl(cpu_cc_dst, cpu_T[0]);
 }
 
+static inline void gen_op_testl_T0_T1_cc_chatkey(TCGMemOp ot)
+{
+    tcg_gen_and_tl_chatkey(cpu_cc_dst, cpu_T[0], cpu_T[1], ot);
+}
+
 static inline void gen_op_testl_T0_T1_cc(void)
 {
     tcg_gen_and_tl(cpu_cc_dst, cpu_T[0], cpu_T[1]);
@@ -945,7 +962,8 @@
 
 /* perform a conditional store into register 'reg' according to jump opcode
    value 'b'. In the fast case, T0 is guaranted not to be used. */
-static CCPrepare gen_prepare_cc(DisasContext *s, int b, TCGv reg)
+static CCPrepare gen_prepare_cc(DisasContext *s, int b, TCGv reg,
+                                int cc_optimize_flag)
 {
     int inv, jcc_op, cond;
     TCGMemOp size;
@@ -957,6 +975,8 @@
 
     switch (s->cc_op) {
     case CC_OP_SUBB ... CC_OP_SUBQ:
+        if (!cc_optimize_flag)
+          goto slow_jcc;
         /* We optimize relational operators for the cmp/jcc case.  */
         size = s->cc_op - CC_OP_SUBB;
         switch (jcc_op) {
@@ -1041,9 +1061,9 @@
     return cc;
 }
 
-static void gen_setcc1(DisasContext *s, int b, TCGv reg)
+static void gen_setcc1(DisasContext *s, int b, TCGv reg, int cc_optimize_flag)
 {
-    CCPrepare cc = gen_prepare_cc(s, b, reg);
+    CCPrepare cc = gen_prepare_cc(s, b, reg, cc_optimize_flag);
 
     if (cc.no_setcond) {
         if (cc.cond == TCG_COND_EQ) {
@@ -1073,14 +1093,14 @@
 
 static inline void gen_compute_eflags_c(DisasContext *s, TCGv reg)
 {
-    gen_setcc1(s, JCC_B << 1, reg);
+    gen_setcc1(s, JCC_B << 1, reg, 1);
 }
 
 /* generate a conditional jump to label 'l1' according to jump opcode
    value 'b'. In the fast case, T0 is guaranted not to be used. */
 static inline void gen_jcc1_noeob(DisasContext *s, int b, TCGLabel *l1)
 {
-    CCPrepare cc = gen_prepare_cc(s, b, cpu_T[0]);
+    CCPrepare cc = gen_prepare_cc(s, b, cpu_T[0], 1);
 
     if (cc.mask != -1) {
         tcg_gen_andi_tl(cpu_T[0], cc.reg, cc.mask);
@@ -1098,7 +1118,28 @@
    A translation block must end soon.  */
 static inline void gen_jcc1(DisasContext *s, int b, TCGLabel *l1)
 {
-    CCPrepare cc = gen_prepare_cc(s, b, cpu_T[0]);
+    CCPrepare cc;
+    int jcc_op = (b >> 1) & 7;
+    int cc_optimize_flag = 1;
+
+    /* Note that we should examine all the callsites of gen_jcc1() to understand
+     * which branch instructions are instrumentation target of Chatkey.
+     */
+    // TODO : In case of 'test' operation, 'js' instruction may follow to
+    // determine whether the operand is positive or negative. It would be
+    // good to handle this case, too.
+    if (jcc_op == JCC_Z && s->latest_tgt_parm_idx != -1) {
+      tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_EQUALITY;
+      cc_optimize_flag = 0; // Disable cc optimization
+    } else if ((jcc_op == JCC_B || jcc_op == JCC_BE) && s->latest_tgt_parm_idx != -1) {
+      tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_UNSIGNED;
+      cc_optimize_flag = 0; // Disable cc optimization
+    } else if ((jcc_op == JCC_L || jcc_op == JCC_LE) && s->latest_tgt_parm_idx != -1) {
+      tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_SIGNED;
+      cc_optimize_flag = 0; // Disable cc optimization
+    }
+
+    cc = gen_prepare_cc(s, b, cpu_T[0], cc_optimize_flag);
 
     gen_update_cc_op(s);
     if (cc.mask != -1) {
@@ -1235,7 +1276,7 @@
     gen_ ## op(s, ot);                                                        \
     gen_op_add_reg_im(s->aflag, R_ECX, -1);                                   \
     gen_update_cc_op(s);                                                      \
-    gen_jcc1(s, (JCC_Z << 1) | (nz ^ 1), l2);                                 \
+    gen_jcc1(s, (JCC_Z << 1) | (nz ^ 1), l2);                           \
     if (s->repz_opt)                                                          \
         gen_op_jz_ecx(s->aflag, l2);                                          \
     gen_jmp(s, cur_eip);                                                      \
@@ -1321,6 +1362,7 @@
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update3_cc(cpu_tmp4);
         set_cc_op(s1, CC_OP_ADCB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_SBBL:
         gen_compute_eflags_c(s1, cpu_tmp4);
@@ -1329,19 +1371,32 @@
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update3_cc(cpu_tmp4);
         set_cc_op(s1, CC_OP_SBBB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_ADDL:
         tcg_gen_add_tl(cpu_T[0], cpu_T[0], cpu_T[1]);
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update2_cc();
         set_cc_op(s1, CC_OP_ADDB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_SUBL:
         tcg_gen_mov_tl(cpu_cc_srcT, cpu_T[0]);
-        tcg_gen_sub_tl(cpu_T[0], cpu_T[0], cpu_T[1]);
-        gen_op_st_rm_T0_A0(s1, ot, d);
-        gen_op_update2_cc();
-        set_cc_op(s1, CC_OP_SUBB + ot);
+
+        if (chatkey_EP_passed) {
+          tcg_gen_sub_tl_chatkey(cpu_T[0], cpu_T[0], cpu_T[1], ot);
+          /* Update the parameter index of the latest cmp/test instruction. */
+          assert(tcg_ctx.gen_next_parm_idx >= 2);
+          s1->latest_tgt_parm_idx = tcg_ctx.gen_next_parm_idx - 2;
+          gen_op_st_rm_T0_A0(s1, ot, d);
+          gen_op_update2_cc();
+          set_cc_op(s1, CC_OP_SUBB + ot);
+        } else {
+          tcg_gen_sub_tl(cpu_T[0], cpu_T[0], cpu_T[1]);
+          gen_op_st_rm_T0_A0(s1, ot, d);
+          gen_op_update2_cc();
+          set_cc_op(s1, CC_OP_SUBB + ot);
+        }
         break;
     default:
     case OP_ANDL:
@@ -1349,24 +1404,42 @@
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update1_cc();
         set_cc_op(s1, CC_OP_LOGICB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_ORL:
         tcg_gen_or_tl(cpu_T[0], cpu_T[0], cpu_T[1]);
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update1_cc();
         set_cc_op(s1, CC_OP_LOGICB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_XORL:
         tcg_gen_xor_tl(cpu_T[0], cpu_T[0], cpu_T[1]);
         gen_op_st_rm_T0_A0(s1, ot, d);
         gen_op_update1_cc();
         set_cc_op(s1, CC_OP_LOGICB + ot);
+        s1->latest_tgt_parm_idx = -1; // reset
         break;
     case OP_CMPL:
         tcg_gen_mov_tl(cpu_cc_src, cpu_T[1]);
         tcg_gen_mov_tl(cpu_cc_srcT, cpu_T[0]);
-        tcg_gen_sub_tl(cpu_cc_dst, cpu_T[0], cpu_T[1]);
-        set_cc_op(s1, CC_OP_SUBB + ot);
+        /* We will instrument subtract operation generated for OP_CMPL operation
+         * only. Note that we should examine all the callsites of gen_op() to
+         * understand which instruction is instrumented and which are not. For
+         * example, gen_op_jz_ecx() called for translation of 'rep' does not
+         * call gen_op(). Meanwhile, gen_scas()/gen_cmps() internally calls
+         * gen_op(..., OP_CMPL, ...) for string comparison.
+         */
+        if (chatkey_EP_passed) {
+          tcg_gen_sub_tl_chatkey(cpu_cc_dst, cpu_T[0], cpu_T[1], ot);
+          /* Update the parameter index of the latest cmp/test instruction. */
+          assert(tcg_ctx.gen_next_parm_idx >= 2);
+          s1->latest_tgt_parm_idx = tcg_ctx.gen_next_parm_idx - 2;
+          set_cc_op(s1, CC_OP_SUBB + ot);
+        } else {
+          tcg_gen_sub_tl(cpu_cc_dst, cpu_T[0], cpu_T[1]);
+          set_cc_op(s1, CC_OP_SUBB + ot);
+        }
         break;
     }
 }
@@ -1586,14 +1659,14 @@
     t0 = tcg_const_i32(0);
     t1 = tcg_temp_new_i32();
     tcg_gen_trunc_tl_i32(t1, cpu_T[1]);
-    tcg_gen_movi_i32(cpu_tmp2_i32, CC_OP_ADCOX); 
+    tcg_gen_movi_i32(cpu_tmp2_i32, CC_OP_ADCOX);
     tcg_gen_movi_i32(cpu_tmp3_i32, CC_OP_EFLAGS);
     tcg_gen_movcond_i32(TCG_COND_NE, cpu_cc_op, t1, t0,
                         cpu_tmp2_i32, cpu_tmp3_i32);
     tcg_temp_free_i32(t0);
     tcg_temp_free_i32(t1);
 
-    /* The CC_OP value is no longer predictable.  */ 
+    /* The CC_OP value is no longer predictable.  */
     set_cc_op(s, CC_OP_DYNAMIC);
 }
 
@@ -1686,7 +1759,7 @@
         gen_op_ld_v(s, ot, cpu_T[0], cpu_A0);
     else
         gen_op_mov_v_reg(ot, cpu_T[0], op1);
-    
+
     if (is_right) {
         switch (ot) {
         case MO_8:
@@ -2252,13 +2325,13 @@
 }
 
 static void gen_cmovcc1(CPUX86State *env, DisasContext *s, TCGMemOp ot, int b,
-                        int modrm, int reg)
+                        int modrm, int reg, int cc_optimize_flag)
 {
     CCPrepare cc;
 
     gen_ldst_modrm(env, s, modrm, ot, OR_TMP0, 0);
 
-    cc = gen_prepare_cc(s, b, cpu_T[1]);
+    cc = gen_prepare_cc(s, b, cpu_T[1], cc_optimize_flag);
     if (cc.mask != -1) {
         TCGv t0 = tcg_temp_new();
         tcg_gen_andi_tl(t0, cc.reg, cc.mask);
@@ -2282,17 +2355,17 @@
 
 static inline void gen_op_movl_T0_seg(int seg_reg)
 {
-    tcg_gen_ld32u_tl(cpu_T[0], cpu_env, 
+    tcg_gen_ld32u_tl(cpu_T[0], cpu_env,
                      offsetof(CPUX86State,segs[seg_reg].selector));
 }
 
 static inline void gen_op_movl_seg_T0_vm(int seg_reg)
 {
     tcg_gen_andi_tl(cpu_T[0], cpu_T[0], 0xffff);
-    tcg_gen_st32_tl(cpu_T[0], cpu_env, 
+    tcg_gen_st32_tl(cpu_T[0], cpu_env,
                     offsetof(CPUX86State,segs[seg_reg].selector));
     tcg_gen_shli_tl(cpu_T[0], cpu_T[0], 4);
-    tcg_gen_st_tl(cpu_T[0], cpu_env, 
+    tcg_gen_st_tl(cpu_T[0], cpu_env,
                   offsetof(CPUX86State,segs[seg_reg].base));
 }
 
@@ -3089,7 +3162,7 @@
 #endif
             {
                 gen_ldst_modrm(env, s, modrm, MO_32, OR_TMP0, 0);
-                tcg_gen_addi_ptr(cpu_ptr0, cpu_env, 
+                tcg_gen_addi_ptr(cpu_ptr0, cpu_env,
                                  offsetof(CPUX86State,fpregs[reg].mmx));
                 tcg_gen_trunc_tl_i32(cpu_tmp2_i32, cpu_T[0]);
                 gen_helper_movl_mm_T0_mmx(cpu_ptr0, cpu_tmp2_i32);
@@ -3099,14 +3172,14 @@
 #ifdef TARGET_X86_64
             if (s->dflag == MO_64) {
                 gen_ldst_modrm(env, s, modrm, MO_64, OR_TMP0, 0);
-                tcg_gen_addi_ptr(cpu_ptr0, cpu_env, 
+                tcg_gen_addi_ptr(cpu_ptr0, cpu_env,
                                  offsetof(CPUX86State,xmm_regs[reg]));
                 gen_helper_movq_mm_T0_xmm(cpu_ptr0, cpu_T[0]);
             } else
 #endif
             {
                 gen_ldst_modrm(env, s, modrm, MO_32, OR_TMP0, 0);
-                tcg_gen_addi_ptr(cpu_ptr0, cpu_env, 
+                tcg_gen_addi_ptr(cpu_ptr0, cpu_env,
                                  offsetof(CPUX86State,xmm_regs[reg]));
                 tcg_gen_trunc_tl_i32(cpu_tmp2_i32, cpu_T[0]);
                 gen_helper_movl_mm_T0_xmm(cpu_ptr0, cpu_tmp2_i32);
@@ -3263,13 +3336,13 @@
         case 0x7e: /* movd ea, mm */
 #ifdef TARGET_X86_64
             if (s->dflag == MO_64) {
-                tcg_gen_ld_i64(cpu_T[0], cpu_env, 
+                tcg_gen_ld_i64(cpu_T[0], cpu_env,
                                offsetof(CPUX86State,fpregs[reg].mmx));
                 gen_ldst_modrm(env, s, modrm, MO_64, OR_TMP0, 1);
             } else
 #endif
             {
-                tcg_gen_ld32u_tl(cpu_T[0], cpu_env, 
+                tcg_gen_ld32u_tl(cpu_T[0], cpu_env,
                                  offsetof(CPUX86State,fpregs[reg].mmx.MMX_L(0)));
                 gen_ldst_modrm(env, s, modrm, MO_32, OR_TMP0, 1);
             }
@@ -3277,13 +3350,13 @@
         case 0x17e: /* movd ea, xmm */
 #ifdef TARGET_X86_64
             if (s->dflag == MO_64) {
-                tcg_gen_ld_i64(cpu_T[0], cpu_env, 
+                tcg_gen_ld_i64(cpu_T[0], cpu_env,
                                offsetof(CPUX86State,xmm_regs[reg].XMM_Q(0)));
                 gen_ldst_modrm(env, s, modrm, MO_64, OR_TMP0, 1);
             } else
 #endif
             {
-                tcg_gen_ld32u_tl(cpu_T[0], cpu_env, 
+                tcg_gen_ld32u_tl(cpu_T[0], cpu_env,
                                  offsetof(CPUX86State,xmm_regs[reg].XMM_L(0)));
                 gen_ldst_modrm(env, s, modrm, MO_32, OR_TMP0, 1);
             }
@@ -3408,14 +3481,14 @@
             break;
         case 0x050: /* movmskps */
             rm = (modrm & 7) | REX_B(s);
-            tcg_gen_addi_ptr(cpu_ptr0, cpu_env, 
+            tcg_gen_addi_ptr(cpu_ptr0, cpu_env,
                              offsetof(CPUX86State,xmm_regs[rm]));
             gen_helper_movmskps(cpu_tmp2_i32, cpu_env, cpu_ptr0);
             tcg_gen_extu_i32_tl(cpu_regs[reg], cpu_tmp2_i32);
             break;
         case 0x150: /* movmskpd */
             rm = (modrm & 7) | REX_B(s);
-            tcg_gen_addi_ptr(cpu_ptr0, cpu_env, 
+            tcg_gen_addi_ptr(cpu_ptr0, cpu_env,
                              offsetof(CPUX86State,xmm_regs[rm]));
             gen_helper_movmskpd(cpu_tmp2_i32, cpu_env, cpu_ptr0);
             tcg_gen_extu_i32_tl(cpu_regs[reg], cpu_tmp2_i32);
@@ -4411,6 +4484,7 @@
     int modrm, reg, rm, mod, op, opreg, val;
     target_ulong next_eip, tval;
     int rex_w, rex_r;
+    int jcc_op, cc_optimize_flag;
 
     if (unlikely(qemu_loglevel_mask(CPU_LOG_TB_OP | CPU_LOG_TB_OP_OPT))) {
         tcg_gen_debug_insn_start(pc_start);
@@ -5000,15 +5074,33 @@
 
     case 0x84: /* test Ev, Gv */
     case 0x85:
+        /* Test instruction with two register operands, thus the target of
+         * Chatkey instrumentation */
         ot = mo_b_d(b, dflag);
 
         modrm = cpu_ldub_code(env, s->pc++);
         reg = ((modrm >> 3) & 7) | rex_r;
+        /* Added to check equality with 'reg' below */
+        rm = (modrm & 7) | REX_B(s);
 
         gen_ldst_modrm(env, s, modrm, ot, OR_TMP0, 0);
         gen_op_mov_v_reg(ot, cpu_T[1], reg);
-        gen_op_testl_T0_T1_cc();
-        set_cc_op(s, CC_OP_LOGICB + ot);
+        /* We only focus on test instruction with two same registers as operand,
+         * e.g. "test eax, eax". If so, call gen_op_testl_T0_T1_cc_chatkey(),
+         * instead of gen_op_testl_T0_T1_cc().
+         */
+
+        if (reg == rm && chatkey_EP_passed) {
+          gen_op_testl_T0_T1_cc_chatkey(ot);
+          // Update the parameter index of the latest cmp instruction.
+          assert(tcg_ctx.gen_next_parm_idx >= 2);
+          s->latest_tgt_parm_idx = tcg_ctx.gen_next_parm_idx - 2;
+          set_cc_op(s, CC_OP_LOGICB + ot);
+        }
+        else {
+          gen_op_testl_T0_T1_cc();
+          set_cc_op(s, CC_OP_LOGICB + ot);
+        }
         break;
 
     case 0xa8: /* test eAX, Iv */
@@ -5217,7 +5309,7 @@
             gen_lea_modrm(env, s, modrm);
             gen_helper_cmpxchg16b(cpu_env, cpu_A0);
         } else
-#endif        
+#endif
         {
             if (!(s->cpuid_features & CPUID_CX8))
                 goto illegal_op;
@@ -6276,7 +6368,7 @@
     case 0x6d:
         ot = mo_b_d32(b, dflag);
         tcg_gen_ext16u_tl(cpu_T[0], cpu_regs[R_EDX]);
-        gen_check_io(s, ot, pc_start - s->cs_base, 
+        gen_check_io(s, ot, pc_start - s->cs_base,
                      SVM_IOIO_TYPE_MASK | svm_is_rep(prefixes) | 4);
         if (prefixes & (PREFIX_REPZ | PREFIX_REPNZ)) {
             gen_repz_ins(s, ot, pc_start - s->cs_base, s->pc - s->cs_base);
@@ -6537,18 +6629,50 @@
         break;
 
     case 0x190 ... 0x19f: /* setcc Gv */
+        jcc_op = (b >> 1) & 7;
+        cc_optimize_flag = 1;
+
+        /* 'cmp' in front of 'setz' is Chatkey's instrumentation target */
+        if (jcc_op == JCC_Z && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_EQUALITY;
+          cc_optimize_flag = 0; // Disable cc optimization
+        } else if ((jcc_op == JCC_B || jcc_op == JCC_BE) && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_UNSIGNED;
+          cc_optimize_flag = 0; // Disable cc optimization
+        } else if ((jcc_op == JCC_L || jcc_op == JCC_LE) && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_SIGNED;
+          cc_optimize_flag = 0; // Disable cc optimization
+        }
+
         modrm = cpu_ldub_code(env, s->pc++);
-        gen_setcc1(s, b, cpu_T[0]);
+        gen_setcc1(s, b, cpu_T[0], cc_optimize_flag);
         gen_ldst_modrm(env, s, modrm, MO_8, OR_TMP0, 1);
+
         break;
     case 0x140 ... 0x14f: /* cmov Gv, Ev */
+        jcc_op = (b >> 1) & 7;
+        cc_optimize_flag = 1;
+
+        /* 'cmp' in front of 'cmovz' is Chatkey's instrumentation target */
+        if (jcc_op == JCC_Z && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_EQUALITY;
+          cc_optimize_flag = 0; // Disable cc optimization
+        } else if ((jcc_op == JCC_B || jcc_op == JCC_BE) && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_UNSIGNED;
+          cc_optimize_flag = 0; // Disable cc optimization
+        } else if ((jcc_op == JCC_L || jcc_op == JCC_LE) && s->latest_tgt_parm_idx != -1) {
+          tcg_ctx.gen_opparam_buf[s->latest_tgt_parm_idx] = CHATKEY_CMP_SIZE_SIGNED;
+          cc_optimize_flag = 0; // Disable cc optimization
+        }
+
+
         if (!(s->cpuid_features & CPUID_CMOV)) {
             goto illegal_op;
         }
         ot = dflag;
         modrm = cpu_ldub_code(env, s->pc++);
         reg = ((modrm >> 3) & 7) | rex_r;
-        gen_cmovcc1(env, s, ot, b, modrm, reg);
+        gen_cmovcc1(env, s, ot, b, modrm, reg, cc_optimize_flag);
         break;
 
         /************************/
@@ -7338,7 +7462,7 @@
                     break;
                 case 4: /* STGI */
                     if ((!(s->flags & HF_SVME_MASK) &&
-                         !(s->cpuid_ext3_features & CPUID_EXT3_SKINIT)) || 
+                         !(s->cpuid_ext3_features & CPUID_EXT3_SKINIT)) ||
                         !s->pe)
                         goto illegal_op;
                     if (s->cpl != 0) {
@@ -7359,8 +7483,8 @@
                     }
                     break;
                 case 6: /* SKINIT */
-                    if ((!(s->flags & HF_SVME_MASK) && 
-                         !(s->cpuid_ext3_features & CPUID_EXT3_SKINIT)) || 
+                    if ((!(s->flags & HF_SVME_MASK) &&
+                         !(s->cpuid_ext3_features & CPUID_EXT3_SKINIT)) ||
                         !s->pe)
                         goto illegal_op;
                     gen_helper_skinit(cpu_env);
@@ -7978,6 +8102,11 @@
         printf("ERROR addseg\n");
 #endif
 
+    /* (For Chatkey)
+     * Initialize with -1, indicating no 'cmp' or 'test' was encountered yet.
+     */
+    dc->latest_tgt_parm_idx = -1;
+
     cpu_T[0] = tcg_temp_new();
     cpu_T[1] = tcg_temp_new();
     cpu_A0 = tcg_temp_new();
