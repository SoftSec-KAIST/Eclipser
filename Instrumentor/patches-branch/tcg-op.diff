--- qemu-2.10.0-branch/tcg/tcg-op.h.orig	2020-10-03 21:06:01.977430995 -0700
+++ qemu-2.10.0-branch/tcg/tcg-op.h	2020-10-03 21:06:00.237420601 -0700
@@ -26,6 +26,11 @@
 #include "exec/helper-proto.h"
 #include "exec/helper-gen.h"
 
+#define ECLIPSER_CMP_EQUALITY 0
+#define ECLIPSER_CMP_SIZE_SIGNED 1
+#define ECLIPSER_CMP_SIZE_UNSIGNED 2
+#define ECLIPSER_IGNORE 3
+
 /* Basic output routines.  Not for general consumption.  */
 
 void tcg_gen_op1(TCGContext *, TCGOpcode, TCGArg);
@@ -396,14 +401,36 @@
     tcg_gen_op3_i32(INDEX_op_add_i32, ret, arg1, arg2);
 }
 
+/* A variant of tcg_gen_sub_i32() for Eclipser. Additional arguments are passed
+ * to tcg_gen_op5ii_i32(), to indicate the type and size of comparison. We first
+ * pass ECLIPSER_IGNORE as comparison type, and update it later.
+ */
+static inline void tcg_gen_sub_i32_eclipser(TCGv_i32 ret, TCGv_i32 arg1,
+                                           TCGv_i32 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i32(INDEX_op_sub_i32, ret, arg1, arg2, ECLIPSER_IGNORE, ot);
+}
+
 static inline void tcg_gen_sub_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
 {
-    tcg_gen_op3_i32(INDEX_op_sub_i32, ret, arg1, arg2);
+    // Fixed for compatibility. Use dummay values as arguments.
+    tcg_gen_op5ii_i32(INDEX_op_sub_i32, ret, arg1, arg2, ECLIPSER_IGNORE, MO_8);
+}
+
+/* A variant of tcg_gen_and_i32() for Eclipser. Additional arguments are passed
+ * to tcg_gen_op5ii_i32(), to indicate the type and size of comparison. We first
+ * pass ECLIPSER_IGNORE as comparison type, and update it later.
+ */
+static inline void tcg_gen_and_i32_eclipser(TCGv_i32 ret, TCGv_i32 arg1,
+                                           TCGv_i32 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i32(INDEX_op_and_i32, ret, arg1, arg2, ECLIPSER_IGNORE, ot);
 }
 
 static inline void tcg_gen_and_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
 {
-    tcg_gen_op3_i32(INDEX_op_and_i32, ret, arg1, arg2);
+    // Fixed for compatibility. Use dummay values as arguments.
+    tcg_gen_op5ii_i32(INDEX_op_and_i32, ret, arg1, arg2, ECLIPSER_IGNORE, MO_8);
 }
 
 static inline void tcg_gen_or_i32(TCGv_i32 ret, TCGv_i32 arg1, TCGv_i32 arg2)
@@ -608,14 +635,36 @@
     tcg_gen_op3_i64(INDEX_op_add_i64, ret, arg1, arg2);
 }
 
+/* A variant of tcg_gen_sub_i64() for Eclipser. Additional arguments are passed
+ * to tcg_gen_op5ii_i64(), to indicate the type and size of comparison. We first
+ * pass ECLIPSER_IGNORE as comparison type, and update it later.
+ */
+static inline void tcg_gen_sub_i64_eclipser(TCGv_i64 ret, TCGv_i64 arg1,
+                                           TCGv_i64 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i64(INDEX_op_sub_i64, ret, arg1, arg2, ECLIPSER_IGNORE, ot);
+}
+
 static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
-    tcg_gen_op3_i64(INDEX_op_sub_i64, ret, arg1, arg2);
+    // Fixed for compatibility. Use dummay values as arguments.
+    tcg_gen_op5ii_i64(INDEX_op_sub_i64, ret, arg1, arg2, ECLIPSER_IGNORE, MO_8);
+}
+
+/* A variant of tcg_gen_and_i64() for Eclipser. Additional arguments are passed
+ * to tcg_gen_op5ii_i64(), to indicate the type and size of comparison. We first
+ * pass ECLIPSER_IGNORE as comparison type, and update it later.
+ */
+static inline void tcg_gen_and_i64_eclipser(TCGv_i64 ret, TCGv_i64 arg1,
+                                           TCGv_i64 arg2, TCGMemOp ot)
+{
+    tcg_gen_op5ii_i64(INDEX_op_and_i64, ret, arg1, arg2, ECLIPSER_IGNORE, ot);
 }
 
 static inline void tcg_gen_and_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
-    tcg_gen_op3_i64(INDEX_op_and_i64, ret, arg1, arg2);
+    // Fixed for compatibility. Use dummay values as arguments.
+    tcg_gen_op5ii_i64(INDEX_op_and_i64, ret, arg1, arg2, ECLIPSER_IGNORE, MO_8);
 }
 
 static inline void tcg_gen_or_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
@@ -672,8 +721,17 @@
                      TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));
 }
 
+/* We leave the following function as it is, since it is unreachable in Intel
+ * architecture. This definition is used when both 'TCG_TARGET_REG_BITS == 32'
+ * and 'TARGET_LONG_BITS == 64' are satisfied, but this is infeasible according
+ * to target/i386/cpu.h and tcg/i386/tcg-target.h files. If we want to extend
+ * eclipser to support other architectures, we should investigate if the
+ * architecture has 32-bit width registers but supports 64-bit subtraction. If
+ * so, below code must be modified as well.
+ */
 static inline void tcg_gen_sub_i64(TCGv_i64 ret, TCGv_i64 arg1, TCGv_i64 arg2)
 {
+    assert(0);
     tcg_gen_sub2_i32(TCGV_LOW(ret), TCGV_HIGH(ret), TCGV_LOW(arg1),
                      TCGV_HIGH(arg1), TCGV_LOW(arg2), TCGV_HIGH(arg2));
 }
@@ -932,10 +990,12 @@
 #define tcg_gen_add_tl tcg_gen_add_i64
 #define tcg_gen_addi_tl tcg_gen_addi_i64
 #define tcg_gen_sub_tl tcg_gen_sub_i64
+#define tcg_gen_sub_tl_eclipser tcg_gen_sub_i64_eclipser
 #define tcg_gen_neg_tl tcg_gen_neg_i64
 #define tcg_gen_subfi_tl tcg_gen_subfi_i64
 #define tcg_gen_subi_tl tcg_gen_subi_i64
 #define tcg_gen_and_tl tcg_gen_and_i64
+#define tcg_gen_and_tl_eclipser tcg_gen_and_i64_eclipser
 #define tcg_gen_andi_tl tcg_gen_andi_i64
 #define tcg_gen_or_tl tcg_gen_or_i64
 #define tcg_gen_ori_tl tcg_gen_ori_i64
@@ -1030,10 +1090,12 @@
 #define tcg_gen_add_tl tcg_gen_add_i32
 #define tcg_gen_addi_tl tcg_gen_addi_i32
 #define tcg_gen_sub_tl tcg_gen_sub_i32
+#define tcg_gen_sub_tl_eclipser tcg_gen_sub_i32_eclipser
 #define tcg_gen_neg_tl tcg_gen_neg_i32
 #define tcg_gen_subfi_tl tcg_gen_subfi_i32
 #define tcg_gen_subi_tl tcg_gen_subi_i32
 #define tcg_gen_and_tl tcg_gen_and_i32
+#define tcg_gen_and_tl_eclipser tcg_gen_and_i32_eclipser
 #define tcg_gen_andi_tl tcg_gen_andi_i32
 #define tcg_gen_or_tl tcg_gen_or_i32
 #define tcg_gen_ori_tl tcg_gen_ori_i32
